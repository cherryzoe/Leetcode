Given two binary trees, write a function to check if they are equal or not.

Two binary trees are considered equal if they are structurally identical and the nodes have the same value.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        //Recursive
        if(p == null && q == null) return true;
        if(p == null || q == null) return false;
        if(p.val == q.val) 
            return isSameTree(p.left,q.left) && isSameTree(p.right,q.right);
        else return false;
        
        //Iterative
        Queue<TreeNode> q1 = new LinkedList<TreeNode>();
        Queue<TreeNode> q2 = new LinkedList<TreeNode>();
        
        q1.add(p);
        q2.add(q);
        
        
        while(!q1.isEmpty() && !q2.isEmpty()){
            TreeNode n1 = q1.poll();
            TreeNode n2 = q2.poll();
            
        if(n1 == null && n2 == null) continue;
        if(n1 == null || n2 == null) return false;
        if(n1.val != n2.val) return false;
        
        q1.add(n1.left);
        q1.add(n1.right);
        q2.add(n2.left);
        q2.add(n2.right);
        }
        
        return(q1.isEmpty() && q2.isEmpty());
    }
}